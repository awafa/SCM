#!/bin/bash

# Compiled from schacon git book http://git-scm.com/book/en

# Config editor
git config --global core.editor

# Compiled from http://schacon.github.com/git/gittutorial.html
man gittutorial

# Initialize git for project
cd project
git init

#Ignore file
.gitignore # add patterns to ignore

# global ignore
~/.gitignore_global #(or you name it)
git config --global core.excludesfile ~/.gitignore_global
##============================================================================##
##=========                  Stagging and Commiting                  =========##
##============================================================================##
# Stage files for commit
git add .
#Or
git add file1 file2 ...

# Unstage a file
git reset HEAD file

git commit -m""

# Add to the staging area
git add

##============================================================================##
##=========                         Diffing                          =========##
##============================================================================##
#to diff the staging area compared to HEAD
git diff --cached 

# to diff unstaged vs staging area
# can use wild cards for removals
git rm log/\*.log
git diff 

# To diff with remotes
git branch -a  # List all branches
git fetch origin/master   # Required for update origin/master with merge
git diff origin/master master

# to see status
git status

# Commit staged files
git commit

# -a will stage files before commiting to the repository (if you want to bypass staging )
git commit -a


# Stage a file for removal and remove from disk
git rm file # will be gone in the next commit

# Remove from the staging area only, doesn't remove copy on disk
git rm --cached file 

# can use wild cards for removals
git rm log/\*.log


# Renaming file
git mv file to_file


##============================================================================##
##=========                      Log Inspection                      =========##
##============================================================================##
# Log 
git log

# complete diffs
git log -p
git log -p -2 # Limit to two entries

#Overview of the changes
git log --stat --summary

# Compact one line per checkin
git log --oneline

# --pretty
git log --pretty=oneline

# Custom
git log --pretty=format:"%h - %an, %ar : %s"

# With graph
git log --pretty=format:"%h %s" --graph

# Since a date
git log --since=2.weeks

git log --author=

git log --grep  # Grep for a message

## log filter by date range for files starting with t/
# The -- is the last before the path
git log --pretty="%h:%s" --author=gitster --since="2008-10-01" \
--before="2008-11-01" --no-merges -- t/

# To Branch
git branch experimental

# List of branches, the one marked with an asterisk is the one you are currently on
git branch


# To switch to the experimental branch
git checkout experimental

# Edit file, then switch back to master branch
git commit -a
git checkout master


# Edit file, and commit to the master branch
git commit -a


# to merge changes from master to experimental
git merge experimental


##============================================================================##
##=========                 GUI -- Graphical history                 =========##
##============================================================================##
gitk
git citool

# History for individual files
gitk file_name


# Delete the experimental branch, after making sure its changes were merged to the currennt branch
git branch -d experimental

# To the delete the branch and forget it
git branch -D experimental


##============================================================================##
##=========                         Git hub                          =========##
##============================================================================##
git init
git add *_cmds
git commit -m"Initial commit"
git remote add origin https://github.com/awafa/SCM.git
git push -u origin master

## Show details about remotes
git remote -v
# origin  https://github.com/awafa/SCM.git (fetch)
# origin  https://github.com/awafa/SCM.git (push)

# To add nother remote
git remote add short_name url
# e.g.
git remote add short_name git://github.com/paulboone/ticgit.git


# To fetch updates in origin, get all the data that you don't have
# , after that you should have references to all the branches from the remote
# no auto merge
git fetch origin

# If you are tracking a remote, you can use
git pull # to auto fetch and merge

# if you used git clone, then you are tracking the origin


## Pushing
# git push remote_name branch_name
git push origin master

# Inspecting remote
#git remote show remote-name
git remote show origin

# Rename remote
git remote rename from to

# Remote remove
git remote rm remote-name


##============================================================================##
##=========                         Tagging                          =========##
##============================================================================##

# List tags
git tag

## Types of tags
# Lightweight
# Annoated

# Show details about tag
git show v1.8.0.1

# Annotated tagging
git tag -a tag_name -m "message"

# GPG signed tags
git tag -s tag_name -m "message"

# Verify a signed tag (Requires the author's public key to be present)
git tag -v tag_name

# LightWeight taggin
git tag tag_name


# Tagging a commit
git log --pretty=oneline
# git tag -a tag_name -m "Message" checksum(or part of it)
git tag -a tag_name -m "Message" 6f26ad92


# Tags have to be pushed explicitly
git push origin tag_name


##============================================================================##
##=========                     Tips and tricks                      =========##
##============================================================================##

# Auto completion
# cp the git-completion.bash from git_src/contrib/completion and source it

# Define aliases
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status

# Unstaging alias
git config --global alias.unstage 'reset HEAD --'

# Run shell command
git config --global alias.visual '!gitk'

##============================================================================##
##=========                         Stashing                         =========##
##============================================================================##
git stash
git pull
git stash pop


##============================================================================##
##=========                        Branching                         =========##
##============================================================================##
# HEAD special pointer pointing to the branch you are currently in

# Dump list of branches
git branch

# To branch (we initially started with a master branch)
# git branch branch_name
git branch testing

# To switch branch
# git checkout branch_name
git checkout testing

# To switch and branch
git checkout -b testing

# Commit a change, now testing is different

# switch back to master branch
# Reverts file in local directory to be consistent with the master
git checkout master 

# Merge the branch testing to master
git merge testing

# Delete the testing branch after you are done (if you want)
git branch -d testing

# git branch -D branch_name will force branch deletion

# If the merge lead to conflicts
git status
# find the file to be merged
# edit and resolve for the conflicts manually, look for <<<<<< and >>>>>>>

# Visual merging
git mergetool

# Stage files with resolved merge conflicts will mark it as ready

# Find branches not merged to current
git branch --no-merged

# Find branches merged to current
git branch --merged


# To merge a remote branch
git mrege origin/branch_name

# Fetching a remote branch, and checking it out
git checkout -b branch_name origin/branch_name
# Will track the origin, a git push will push to the same branch in the origin

# Deleting remote branch
# git push [remotename] [localbranch]:[remotebranch]
git push origin :branch_name
# If you leave off the [localbranch] portion, then you¿re basically saying, ¿Take nothing on my side and make it be [remotebranch].


# Rebasing 
# Update the base of my testing branch to include the latest from the master
# Like stashing the testing diffs, making a new branch suffix2 based on TOT, and applying the testing patches, it just keeps the same branch name "testing"
git checkout testing
git rebase master 

############### Rebasing example 1
git branch new_fix
# Commit some fixes in new_fix
# Assume the master diverged with more work

# Rebase the new_fix to include lastest from master
git rebase origin/master

# Merge work back on top of master
git checkout master
git merge new_fix
############### End rebasing example 1

# Rebase without checkout
# Rebase my_branch on top of the master
# (master stay where it is, my_branch change the branching base to be the master)
git rebase master my_branch




##============================================================================##
##=========                     Merge vs Rebase                      =========##
##============================================================================##
# Rebasing replays changes from one line of work onto another in the order they were introduced, whereas merging takes the endpoints and merges them together.

# !!!!!!!!! Rebasing Warnings !!!!!!!!!
# If you treat rebasing as a way to clean up and work with commits before you push them, and if you only rebase commits that have never been available publicly, then you¿ll be fine. If you rebase commits that have already been pushed publicly, and people may have based work on those commits, then you may be in for some frustrating trouble.


##============================================================================##
##=========                        Git server                        =========##
##============================================================================##
# A remote repository is generally a bare repository (no working directory)

# ssh access
git clone ssh://user@server:project.git



######################
## Collaboration

# To collaborate on an existing project at /home/alice/project, Bob will create myrepo

bob$
git clone /home/alice/project myrepo

# Edit file, then commit
bob$
git commit -a

# Alice can pull changes when Bob is done (Will pull and merge change)
alice$
cd /home/alice/project
git pull /home/bob/myrepo master


# OR Alice can peek at the changes only
# This operation is safe even if Alice has uncommitted local changes. The range notation "HEAD..FETCH_HEAD" means "show everything that is reachable from the FETCH_HEAD but exclude anything that is reachable from HEAD". Alice already knows everything that leads to her current state (HEAD), and reviews what Bob has in his state (FETCH_HEAD) that she has not seen with this command.
alice$
git fetch /home/bob/myrepo master
git log -p HEAD..FETCH_HEAD

# Or visualize it
alice$
gitk HEAD..FETCH_HEAD

# Visualize changes both of them did since they forked
#This means "show everything that is reachable from either one, but exclude anything that is reachable from both of them".
alice$
gitk HEAD...FETCH_HEAD


# Add a remote repo shorthand for a repo that i regularly interact with
alice$
git remote add bob /home/bob/myrepo
# Then Alice can use
alice$
git fetch bob

# Using a shorthand forms bring bobs stuff to a remote tracking branch bob/master
# alice can use

alice$
git log -p master..bob/master

# Alice can merge change after inspection
alice$
git merge bob/master

# OR Alice can pull from the remote tracking branch
alice$
git pull . remotes/bob/master

# Bob can update from Alice (note that he originally cloned her repo)
bob$
git pull

# Bob can query for the project repo
bob$
git config --get remote.origin.url
o

# Master copy at clone time
bob $ git branch -r
origin/master


# ssh cloning
bob$
git clone alice.org:/home/alice/project myrepo


#########
## Exploring History

### Configuring git ssh
#  https://help.github.com/articles/generating-ssh-keys

cd ~/.ssh

ssh-keygen -t rsa -C "your_email@example.com"

# Creates a new ssh key using the provided email

# Generating public/private rsa key pair.
# Enter file in which to save the key (/home/you/.ssh/id_rsa):

# Enter passphrase (empty for no passphrase): [Type a passphrase]
# Enter same passphrase again: [Type passphrase again]


# Copy generated public key
# xclip -sel clip < ~/.ssh/id_rsa.pub


# 1) Go to your Account Settings
# 2) Click "SSH Keys" in the left sidebar
# 3) Click "Add SSH key"
# 4) Paste your key into the "Key" field
# 5) Click "Add key"
# 6) Confirm the action by entering your GitHub password


## Test it
 ssh -T git@github.com

# Change the pass phrase for the generated key
ssh-keygen -f id_rsa -p

# Update git to use ssh
git remote set-url origin git@github.com:username/repo.git


# Make master different
